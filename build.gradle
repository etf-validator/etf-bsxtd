import io.qameta.allure.gradle.task.AllureReport

///////////////////////////////////////////////////////////////////////////////////////
//
// ETF-BSXTD
//
///////////////////////////////////////////////////////////////////////////////////////

buildscript {
    repositories {
        maven {
            url "https://af.etf.interactive-instruments.de/repository/gradle-plugins"
            credentials {
                username 'ii-bda'
                password 'AP7mb4WA6F1ckdZkaE8Qx8GSowt'
            }}
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'de.interactive_instruments.bda', name: 'etf-bda', version: '[2.0.29,2.0.99]'
        classpath group: 'io.qameta.allure', name: 'allure-gradle', version: '2.8.1'
    }
    dependencies {
        ant.unjar src: configurations.classpath.files.find { it.path.contains('etf') }, dest: 'build/gradle'
    }
}
apply from: 'build/gradle/ii-bda.gradle'
apply plugin: 'io.qameta.allure'

///////////////////////////////////////////////////////////////////////////////////////

group = 'de.interactive_instruments.etf.testdriver'
description = "ETF BaseX test driver"

ext.basexVersion = '9.4.6'
ext.basexApiVersion = '9.4.6'
ext.deegreeVersion = '3.3.20'
// ext.deegreeVersion = '3.4.12'
ext.geoToolsVersion = '21.2'
ext.allureVersion = '2.13.0'

ext.testDefaultDeploymentDir = project.file('./build/tmp/td')
ext.testDeploymentDir = project.hasProperty('etf.td.deployment.dir') ?
        project.getProperty('etf.td.deployment.dir') :
        ext.testDefaultDeploymentDir

allprojects {

    configurations {
        xarFile
    }

    sourceCompatibility = '11'
    targetCompatibility = '11'

    configurations {
        implementation {
            exclude group:'org.codehaus.groovy'
        }
        all {
            exclude group: 'com.thoughtworks.xstream', module: 'xstream'
            exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.jdom', module: 'jdom'
            exclude group: 'org.reflections', module: 'reflections'
        }
    }

    apply plugin: 'io.qameta.allure'

	if (project.name.startsWith("etf-bsxtd")) {
		// project.tasks.release.mustRunAfter(project.tasks.getByPath(':service-test-library'))
		// project.tasks.release.mustRunAfter(project.tasks.getByPath(':test-driver'))
		// project.tasks.release.mustRunAfter(project.tasks.getByPath(':test-lang'))
	}else{
		task preTagCommit(overwrite: true) {}
		task createReleaseTag(overwrite: true) {}
		task updateVersion(overwrite: true) {}
		task commitNewVersion(overwrite: true) {}
		task unSnapshotVersion(overwrite: true) {}
		task updateVersion(overwrite: true) {}
		task commitNewVersion(overwrite: true) {}
	}
}

subprojects {
	dependencies {
		compile group: 'de.interactive_instruments', name: 'ii-commons-util', version: '4.0.1' + project.snapshotSuffix
        if(Integer.valueOf(org.gradle.internal.jvm.Jvm.current().getJavaVersion().getMajorVersion())>8) {
            implementation('org.glassfish.jaxb:jaxb-runtime:2.3.3')
        }

        // upgrade (XML External Entity (XXE) Injection)
        compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'

        testImplementation group: 'org.slf4j', name: 'slf4j-api', version: etf_slf4jApiVersion
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: etf_slf4jApiVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: etf_junitTestVersion
        testImplementation "org.xmlunit:xmlunit-core:2.6.2"
	}

	apply plugin: 'java'
	apply plugin: 'maven'

    ext.allureVersion = rootProject.ext.allureVersion
    allure {
        autoconfigure = true
        version = project.ext.allureVersion
        useJUnit5 {
            version = project.ext.allureVersion
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

task allureAggregatedReport(type: AllureReport) {
    resultsDirs = subprojects.allure.resultsDir
    version = rootProject.ext.allureVersion
}
allureAggregatedReport.dependsOn.remove('downloadAllure')

test {
    finalizedBy allureAggregatedReport
}
